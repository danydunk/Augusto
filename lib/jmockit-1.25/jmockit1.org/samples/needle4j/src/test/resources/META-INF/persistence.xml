<?xml version="1.0" encoding="UTF-8"?>
<persistence
   xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
   version="2.1">

   <persistence-unit name="TestDataModel">
      <jar-file>target/classes</jar-file>

      <properties>
         <property name="javax.persistence.jdbc.driver" value="org.hsqldb.jdbcDriver"/>
         <property name="javax.persistence.jdbc.url" value="jdbc:hsqldb:."/>
         <property name="javax.persistence.jdbc.user" value="sa"/>

         <!-- Properties for Hibernate -->
         <property name="hibernate.show_sql" value="true"/>

         <!--
            Causes the creation and execution of DDL statements that create all tables for the database.

            In general (and contrary to popular opinion), using an in-memory database is *not* a good idea
            for testing, as it incurs significant startup overhead on every test execution.
            A better idea is to simply connect to a running database, where all tables are already created
            (and populated with baseline data), therefore avoiding the startup cost.
            An in-memory embedded database that runs inside the same JVM instance used by tests may be
            faster to execute DML statements (due to no inter-process or network communication), but it ends
            up losing that advantage when the extra startup time is considered.

            Additionally, one has to also consider that 1) the embedded db engine is most likely not the
            same as the one used for manual testing and production use; and 2) integration tests executed
            against a db created "just-in-time" will not detect problems the real database may have, as it
            is typically maintained through the application of incremental SQL scripts.
         -->
         <property name="javax.persistence.schema-generation.database.action" value="create"/>
      </properties>
   </persistence-unit>
</persistence>